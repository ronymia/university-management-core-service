generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  title      String
  year       Int
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  students   Student[]
  faculties  Faculty[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  academicDepartments AcademicDepartment[]
  students            Student[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]

  @@map("academic_departments")
}

model Student {
  id                 String   @id @default(uuid())
  studentId          String   @unique
  firstName          String
  middleName         String
  lastName           String
  profileImage       String
  email              String   @unique
  contactNo          String   @unique
  emergencyContactNo String
  gender             String
  bloodGroup         String
  dateOfBirth        DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String   @unique
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String   @unique
  contactNo    String   @unique
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  @@map("faculties")
}

model Admin {
  id           String   @id @default(uuid())
  adminId      String   @unique
  firstName    String
  middleName   String
  lastName     String
  profileImage String
  email        String   @unique
  contactNo    String   @unique
  gender       String
  bloodGroup   String
  designation  String
  department   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@map("admins")
}
